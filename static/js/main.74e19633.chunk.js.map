{"version":3,"sources":["components/header/index.jsx","components/content/surah/index.jsx","components/content/isiSurah/index.jsx","components/content/index.jsx","components/searchBar/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Header","className","Surah","props","dataSeluruhSurah","map","item","index","key","asma","nama","arti","onClick","getDataIsiSurat","nomor","IsiSurah","console","log","judulSurah","onHandleHome","isiSurat","ar","teks","id","Content","SearchBar","type","placeholder","aria-label","onChange","onHandleInput","value","inputValue","App","getDataSeluruhSurat","axios","get","then","res","setState","data","hasil","state","ayat","input","event","target","SearchedSurah","filter","toLowerCase","indexOf","newDataSeluruhSurah","isiAyat","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.74e19633.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => {\n   return (\n      <div className='container text-light bg-info'>\n         <h2 className='p-4 text-center'>QuranOnline</h2>\n      </div>\n   )\n}\n\nexport default Header","import React from 'react'\n\nconst Surah = (props) => {\n   return (\n      <div className=\"container mt-2   \">\n         <h4 className='text-center text-light mt-5'>Daftar Surah</h4>\n         <div className=\"row justify-content-center mt-5 \">\n            {\n               props.dataSeluruhSurah.map((item, index) => (\n                  <div className=\"col-md-3\" key={index} >\n                     <div className=\"card text-center p-3 m-2\">\n                        <h4>{item.asma}</h4>\n                        <h>{item.nama}</h>\n                        <p>({item.arti})</p>\n\n                        <button className='btn btn-default btn-outline-info'\n                           onClick = {()=>props.getDataIsiSurat(item.nomor, item.nama)}\n                        >\n                           BacaSurah\n                        </button>\n                     </div>\n                  </div>\n               ))\n            }\n         </div>\n      </div>\n   )\n}\n\nexport default Surah","import React from 'react'\n\nconst IsiSurah = (props) => {\n   console.log(props, 'page isiSurah');\n   return (\n      <div className='container text-light '>\n            <h5 className='text-center mt-5'>\n               {props.judulSurah}\n            </h5>\n         <div className=\"row justify-content-center\">\n            <button \n               className='btn btn-outline-light'\n               onClick = {props.onHandleHome} \n            >\n               Home\n            </button>\n         </div>\n         <ol className='mt-5 ml-auto'>\n            {props.isiSurat.ar.map((item, index) => (\n               <li  key={index} >\n                 <h4 className='text-light ml-auto p-3'>\n                  {item.teks}\n                  </h4> \n               </li>\n            ))}\n            </ol>\n            <ol>\n            {props.isiSurat.id.map((item, index) => (\n               <li  key={index} >\n                 <h5 className='text-light ml-auto p-3'>\n                  {item.teks}\n                  </h5> \n               </li>\n            ))}\n         </ol>\n      </div>\n   )\n}\n\nexport default IsiSurah","import React from 'react'\nimport Surah from './surah'\nimport IsiSurah from './isiSurah'\nimport FirstPage from './firstpage'\n\nconst Content = (props) => {\n   return (\n      <div className='container-fluid'>\n         {props.dataSeluruhSurah && !props.isiSurat\n            ? \n            <Surah \n            dataSeluruhSurah = {props.dataSeluruhSurah}\n            isiSurat         = {props.isiSurat}\n            getDataIsiSurat  = {props.getDataIsiSurat}\n            /> \n            : props.isiSurat \n            ? <IsiSurah \n                  onHandleHome = {props.onHandleHome}\n                  isiSurat     = {props.isiSurat}\n                  judulSurah   = {props.judulSurah}\n               /> \n               :   null\n         }\n      </div>\n   )\n}\n\nexport default Content","import React from 'react'\n\nconst SearchBar = (props) => {\n   return (\n      <div className='container'> \n          <input \n            className=\"form-control mr-sm-2\" \n            type=\"search\" \n            placeholder=\"Cari Surah\" \n            aria-label=\"Search\" \n            onChange = {props.onHandleInput}\n            value = {props.inputValue}\n          />\n      </div>\n   )\n}\n\nexport default SearchBar","import React, { Component } from 'react';\nimport axios from 'axios'\nimport Header from './components/header';\nimport Content from './components/content';\nimport SearchBar from './components/searchBar';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n        dataSeluruhSurah : [],\n        newDataSeluruhSurah : null,\n        judulSurah       : '',\n        isiSurat         : null,\n        isiAyat          : null,\n        input            : ''\n\n    }\n  }\n  \n  componentDidMount () {\n    this.getDataSeluruhSurat()\n  }\n  getDataSeluruhSurat = () => {\n    axios.get(`https://api.banghasan.com/quran/format/json/surat`)\n    .then( res => {\n      this.setState({\n        dataSeluruhSurah : res.data.hasil\n      }, () => {\n        console.log(this.state.dataSeluruhSurah, 'push Api to state dataseluruhSurah');\n      })\n    })\n  }\n  getDataIsiSurat = (nomor, judulSurah) => {\n    axios.get(`https://api.banghasan.com/quran/format/json/surat/${nomor}/ayat/1-10`)\n    .then((res) => {\n      console.log(res.data.ayat.data.ar);\n      this.setState({\n        isiSurat :  res.data.ayat.data,\n        judulSurah,\n        input : ' '\n      }, () => {\n        console.log('this.state.isiSurat : ', this.state.isiSurat);\n      });\n    })\n  }\n  onHandleInput = (event) => {\n    this.setState({\n      input : event.target.value,\n    },() => {\n      if(this.state.dataSeluruhSurah){\n        const SearchedSurah = this.state.dataSeluruhSurah.filter(item => (\n          item.nama.toLowerCase().indexOf(this.state.input.toLowerCase()) > -1\n        ))\n        this.setState({\n          newDataSeluruhSurah : SearchedSurah,\n        }, () => {\n          console.log('newDataSeluruhSurah : ', this.state.newDataSeluruhSurah);\n        })\n      }\n    })\n  }\n  onHandleHome = () => {\n    console.log('btn diklik');\n    this.setState({\n      isiSurat : null,\n      input : ''\n    })\n  }\n\n  render () {\n    return (\n        <div className=\"App bg-info \">\n          <Header />\n          <SearchBar \n            onHandleInput     = {this.onHandleInput}\n            inputValue        = {this.state.input}\n          />\n          <Content \n            dataSeluruhSurah  = {this.state.newDataSeluruhSurah}\n            isiSurat          = {this.state.isiSurat}\n            getDataIsiSurat   = {this.getDataIsiSurat}\n            judulSurah        = {this.state.judulSurah}\n            onHandleHome      = {this.onHandleHome}\n          />\n        </div>\n      );\n    }\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}